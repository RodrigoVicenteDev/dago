// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using dago.Data;

#nullable disable

namespace dago.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251031185609_AddDestinatariokOnCtrc")]
    partial class AddDestinatariokOnCtrc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("dago.Models.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CtrcId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TipoAgendaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CtrcId");

                    b.HasIndex("TipoAgendaId");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("dago.Models.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("dago.Models.Cidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TipoRegiaoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.HasIndex("TipoRegiaoId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("dago.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("dago.Models.Ctrc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CidadeDestinoId")
                        .HasColumnType("integer");

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destinatario")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("DesvioPrazoDias")
                        .HasColumnType("integer");

                    b.Property<int>("EstadoDestinoId")
                        .HasColumnType("integer");

                    b.Property<int>("LeadTimeDias")
                        .HasColumnType("integer");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumeroNotaFiscal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observacao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("StatusEntregaId")
                        .HasColumnType("integer");

                    b.Property<int>("UnidadeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CidadeDestinoId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("EstadoDestinoId");

                    b.HasIndex("StatusEntregaId");

                    b.HasIndex("UnidadeId");

                    b.ToTable("Ctrcs");
                });

            modelBuilder.Entity("dago.Models.Estado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CodigoUf")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.HasKey("Id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("dago.Models.LeadTimeCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("integer");

                    b.Property<int>("DiasLead")
                        .HasColumnType("integer");

                    b.Property<int>("TipoRegiaoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("TipoRegiaoId");

                    b.ToTable("LeadTimesCliente");
                });

            modelBuilder.Entity("dago.Models.OcorrenciaAtendimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CtrcId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<bool>("ReplicaClientes")
                        .HasColumnType("boolean");

                    b.Property<int>("TipoOcorrenciaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CtrcId");

                    b.HasIndex("TipoOcorrenciaId");

                    b.ToTable("OcorrenciasAtendimento");
                });

            modelBuilder.Entity("dago.Models.OcorrenciaSistema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CtrcId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("NumeroOcorrencia")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CtrcId");

                    b.ToTable("OcorrenciasSistema");
                });

            modelBuilder.Entity("dago.Models.ParticularidadeCliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CtrcId")
                        .HasColumnType("integer");

                    b.Property<string>("Loja")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Remessa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CtrcId")
                        .IsUnique();

                    b.ToTable("ParticularidadesCliente");
                });

            modelBuilder.Entity("dago.Models.StatusEntrega", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("StatusesEntrega");
                });

            modelBuilder.Entity("dago.Models.TipoAgenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposAgenda");
                });

            modelBuilder.Entity("dago.Models.TipoOcorrencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TiposOcorrencia");
                });

            modelBuilder.Entity("dago.Models.TipoRegiao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TiposRegiao");
                });

            modelBuilder.Entity("dago.Models.Unidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EstadoId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Unidades");
                });

            modelBuilder.Entity("dago.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CargoId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("dago.Models.Agenda", b =>
                {
                    b.HasOne("dago.Models.Ctrc", "Ctrc")
                        .WithMany("Agendas")
                        .HasForeignKey("CtrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dago.Models.TipoAgenda", "TipoAgenda")
                        .WithMany("Agendas")
                        .HasForeignKey("TipoAgendaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ctrc");

                    b.Navigation("TipoAgenda");
                });

            modelBuilder.Entity("dago.Models.Cidade", b =>
                {
                    b.HasOne("dago.Models.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dago.Models.TipoRegiao", "TipoRegiao")
                        .WithMany("Cidades")
                        .HasForeignKey("TipoRegiaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");

                    b.Navigation("TipoRegiao");
                });

            modelBuilder.Entity("dago.Models.Cliente", b =>
                {
                    b.HasOne("dago.Models.Usuario", "Usuario")
                        .WithMany("Clientes")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("dago.Models.Ctrc", b =>
                {
                    b.HasOne("dago.Models.Cidade", "CidadeDestino")
                        .WithMany("Ctrcs")
                        .HasForeignKey("CidadeDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dago.Models.Cliente", "Cliente")
                        .WithMany("Ctrcs")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dago.Models.Estado", "EstadoDestino")
                        .WithMany("Ctrcs")
                        .HasForeignKey("EstadoDestinoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dago.Models.StatusEntrega", "StatusEntrega")
                        .WithMany("Ctrcs")
                        .HasForeignKey("StatusEntregaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("dago.Models.Unidade", "Unidade")
                        .WithMany("Ctrcs")
                        .HasForeignKey("UnidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CidadeDestino");

                    b.Navigation("Cliente");

                    b.Navigation("EstadoDestino");

                    b.Navigation("StatusEntrega");

                    b.Navigation("Unidade");
                });

            modelBuilder.Entity("dago.Models.LeadTimeCliente", b =>
                {
                    b.HasOne("dago.Models.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dago.Models.TipoRegiao", "TipoRegiao")
                        .WithMany()
                        .HasForeignKey("TipoRegiaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("TipoRegiao");
                });

            modelBuilder.Entity("dago.Models.OcorrenciaAtendimento", b =>
                {
                    b.HasOne("dago.Models.Ctrc", "Ctrc")
                        .WithMany("OcorrenciasAtendimento")
                        .HasForeignKey("CtrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dago.Models.TipoOcorrencia", "TipoOcorrencia")
                        .WithMany("OcorrenciasAtendimento")
                        .HasForeignKey("TipoOcorrenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ctrc");

                    b.Navigation("TipoOcorrencia");
                });

            modelBuilder.Entity("dago.Models.OcorrenciaSistema", b =>
                {
                    b.HasOne("dago.Models.Ctrc", "Ctrc")
                        .WithMany("OcorrenciasSistema")
                        .HasForeignKey("CtrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ctrc");
                });

            modelBuilder.Entity("dago.Models.ParticularidadeCliente", b =>
                {
                    b.HasOne("dago.Models.Ctrc", "Ctrc")
                        .WithOne("ParticularidadeCliente")
                        .HasForeignKey("dago.Models.ParticularidadeCliente", "CtrcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ctrc");
                });

            modelBuilder.Entity("dago.Models.Unidade", b =>
                {
                    b.HasOne("dago.Models.Estado", "Estado")
                        .WithMany("Unidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("dago.Models.Usuario", b =>
                {
                    b.HasOne("dago.Models.Cargo", "Cargo")
                        .WithMany("Usuarios")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");
                });

            modelBuilder.Entity("dago.Models.Cargo", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("dago.Models.Cidade", b =>
                {
                    b.Navigation("Ctrcs");
                });

            modelBuilder.Entity("dago.Models.Cliente", b =>
                {
                    b.Navigation("Ctrcs");
                });

            modelBuilder.Entity("dago.Models.Ctrc", b =>
                {
                    b.Navigation("Agendas");

                    b.Navigation("OcorrenciasAtendimento");

                    b.Navigation("OcorrenciasSistema");

                    b.Navigation("ParticularidadeCliente");
                });

            modelBuilder.Entity("dago.Models.Estado", b =>
                {
                    b.Navigation("Cidades");

                    b.Navigation("Ctrcs");

                    b.Navigation("Unidades");
                });

            modelBuilder.Entity("dago.Models.StatusEntrega", b =>
                {
                    b.Navigation("Ctrcs");
                });

            modelBuilder.Entity("dago.Models.TipoAgenda", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("dago.Models.TipoOcorrencia", b =>
                {
                    b.Navigation("OcorrenciasAtendimento");
                });

            modelBuilder.Entity("dago.Models.TipoRegiao", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("dago.Models.Unidade", b =>
                {
                    b.Navigation("Ctrcs");
                });

            modelBuilder.Entity("dago.Models.Usuario", b =>
                {
                    b.Navigation("Clientes");
                });
#pragma warning restore 612, 618
        }
    }
}
